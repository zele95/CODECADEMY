SELECT * 
FROM state_climate
LIMIT 5;

-- Write a query that returns the state, year, tempf or tempc, and running_avg_temp (in either Celsius or Fahrenheit) for each state
SELECT state, year, tempc, AVG(tempc) OVER (PARTITION BY state ORDER BY year) AS 'running_avg_temp'
FROM state_climate
LIMIT 20;

-- Write a query that returns state, year, tempf or tempc, and the lowest temperature (lowest_temp) for each state
SELECT state, year, tempc, FIRST_VALUE(tempc) OVER (PARTITION BY state ORDER BY tempc) AS 'lowest temp'
FROM state_climate
LIMIT 20;

-- highest temp
SELECT state, year, tempc, LAST_VALUE(tempc) OVER (PARTITION BY state ORDER BY tempc RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS 'highest temp'
FROM state_climate
LIMIT 20;

-- Write a query to select the same columns but now you should write a window function that returns the change_in_temp from the previous year (no null values should be returned).
SELECT state, year, tempc, tempc - LAG(tempc,1,0) OVER (PARTITION BY state ORDER BY year) AS 'change in temp'
FROM state_climate
LIMIT 20;

-- Write a query to return a rank of the coldest temperatures on record (coldest_rank) along with year, state, and tempf or tempc.
SELECT RANK() OVER (ORDER BY tempc) AS 'coldest_rank', tempc, state, year
FROM state_climate
LIMIT 20;

-- warmest for each state
SELECT RANK() OVER (PARTITION BY state ORDER BY tempc DESC) AS 'warmest_rank', tempc, state, year
FROM state_climate
LIMIT 20;


-- Letâ€™s now write a query that will return the average yearly temperatures in quartiles instead of in rankings for each state.
SELECT NTILE(4) OVER (PARTITION BY state ORDER BY tempc ASC) AS 'quartile', tempc, state, year
FROM state_climate
LIMIT 20;

-- Lastly, we will write a query that will return the average yearly temperatures in quintiles (5).
SELECT NTILE(5) OVER (ORDER BY tempc ASC) AS 'quintile', tempc, state, year
FROM state_climate
LIMIT 20;