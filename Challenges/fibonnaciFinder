# Create a fib_finder() function that finds the nth number
#  in the Fibonacci sequence. As a reminder, the Fibonacci 
# sequence is a mathematical sequence that begins with 0 and 1,
#  with each following term being the sum of the two previous terms.def fib_finder(n):

def fib_finder(n):
  lst = [0,1]
  if n == 1 or n == 2:
    return lst[n-1]
  else:
    for i in range(2,n):
      lst.append(lst[i-2] + lst[i-1]) 
    return lst[n-1]

print(fib_finder(6))


# recursively with dynamic programming
memo = {}

def fibonacci(num):
  if num in memo:
    return  memo[num]
  elif  num == 1:
    return  0
  elif num == 2:
    return 1
  else:
    memo[num] = fibonacci(num-1) + fibonacci(num-2)  
  return memo[num]

print(fibonacci(20))
print(fibonacci(200))

# DP

def fibonacciDP(num):
  memo = {1:0,2:1}
  if num in memo:
    return memo[num]
  else:
    for i in range(3,num+1):
      memo[i] = memo[i-1] + memo[i-2] 
  return memo[num]

print(fibonacciDP(6))
print(fibonacciDP(20))
print(fibonacciDP(200))